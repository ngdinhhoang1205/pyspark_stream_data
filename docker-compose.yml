x-airflow-common: &airflow-common
  build:
    context: ./airflow        
    dockerfile: Dockerfile
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres:5432/airflow
    AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
    AIRFLOW__WEBSERVER__AUTHENTICATE: "True"
    AIRFLOW__WEBSERVER__AUTH_BACKEND: "airflow.www.security.AuthenticationManager"
    _AIRFLOW_WWW_USER_CREATE: true
    _AIRFLOW_WWW_USER_USERNAME: admin
    _AIRFLOW_WWW_USER_PASSWORD: admin
    _AIRFLOW_WWW_USER_FIRSTNAME: Admin
    _AIRFLOW_WWW_USER_LASTNAME: User
    _AIRFLOW_WWW_USER_ROLE: Admin
    _AIRFLOW_WWW_USER_EMAIL: admin@example.com



  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./spark/jobs:/opt/spark/jobs

  depends_on:
    postgres:
      condition: service_healthy

  networks:
    - data-platform


services:
  # -------------------- Kafka (KRaft single node) --------------------
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    ports:
      - "9092:9092"   # for other containers
      - "29092:29092" # for localhost access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server=kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - data-platform
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - data-platform

  # -------------------- Postgres (Airflow metadata + analytics) --------------------
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d  # put SQL to create extra DBs/schemas here
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - data-platform

  # -------------------- Spark Cluster --------------------
  spark-master:
    build:
      context: ./spark           
      dockerfile: Dockerfile
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
      SPARK_EVENTLOG_ENABLED: "true"
      SPARK_EVENTLOG_DIR: file:///opt/spark/events
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - spark_events:/opt/spark/events
      - ./spark/jobs:/opt/spark/jobs
      - ./data:/data
    healthcheck:
      test: ["CMD", "bash", "-lc", "/opt/bitnami/spark/bin/spark-class org.apache.spark.deploy.Client kill spark://spark-master:7077 2>/dev/null || true; printf 'ok'" ]
      interval: 15s
      timeout: 5s
      retries: 10
    networks:
      - data-platform

  spark-worker-1:
    build:
      context: ./spark            
      dockerfile: Dockerfile
    container_name: spark-worker-1
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_PORT: 7078
      SPARK_WORKER_WEBUI_PORT: 8081
    ports:
      - "8081:8081"
    volumes:
      - ./data:/data
      - spark_worker_1:/bitnami
    networks:
      - data-platform

  spark-worker-2:
    build:
      context: ./spark           
      dockerfile: Dockerfile
    container_name: spark-worker-2
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_PORT: 7079
      SPARK_WORKER_WEBUI_PORT: 8082
    ports:
      - "8082:8082"
    volumes:
      - ./data:/data
      - spark_worker_2:/bitnami
    networks:
      - data-platform

  spark-history:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-history
    environment:
      SPARK_MODE: history-server
      SPARK_HISTORY_OPTS: "-Dspark.history.fs.logDirectory=file:/opt/spark/events -Dspark.history.ui.port=18080"
    ports:
      - "18080:18080"
    volumes:
      - spark_events:/opt/spark/events
    networks:
      - data-platform

  # -------------------- Jupyter (dev & exploration) --------------------
  jupyter:
    build:
      context: ./notebooks
      dockerfile: Dockerfile
    container_name: jupyter
    environment:
      JUPYTER_TOKEN: dev
      SPARK_OPTS: "--master spark://spark-master:7077"
      PYSPARK_PYTHON: python
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./spark/jobs:/opt/spark/jobs
      - ./data:/data
    depends_on:
      - spark-master
    networks:
      - data-platform

  # -------------------- Airflow --------------------
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: ""
    command: bash -c "airflow db migrate"

  airflow-dag-processor:
    <<: *airflow-common
    container_name: airflow-dag-processor
    command: dag-processor
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: api-server
    ports:
      - "8088:8080"
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/version || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    entrypoint: ["/bin/bash", "-c"]
    command: |
      "airflow scheduler &

      # Wait for DAGs to be parsed
      until airflow dags list | grep customer_events_dag; do
        echo '⏳ Waiting for DAGs to be parsed...'
        sleep 5
      done

      echo '🚀 DAG found, triggering...'
      airflow dags trigger customer_events_dag

      # Keep container alive with scheduler logs
      wait"
    depends_on:
      postgres:
        condition: service_healthy
      airflow-webserver:
        # condition: service_started
        condition: service_healthy

  # -------------------- Optional: Kafka UI (for debugging) --------------------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: dev
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - data-platform
  producers:
    build:
      context: ./producers
      dockerfile: Dockerfile
    container_name: producers
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - ./producers:/app          # mount producers folder for live editing
    networks:
      - data-platform

volumes:
  postgres_data: {}
  spark_events: {}
  spark_worker_1: {}
  spark_worker_2: {}

networks:
  data-platform:
    name: data-platform
